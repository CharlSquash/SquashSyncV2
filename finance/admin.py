# finance/admin.py
from django.contrib import admin
from django.contrib import messages
from .models import CoachSessionCompletion, Payslip
from scheduling.notifications import send_payslip_email

@admin.register(CoachSessionCompletion)
class CoachSessionCompletionAdmin(admin.ModelAdmin):
    list_display = ('coach', 'session', 'assessments_submitted', 'confirmed_for_payment')
    list_filter = ('session__session_date', 'coach__name', 'assessments_submitted', 'confirmed_for_payment')
    search_fields = ('coach__name',)
    raw_id_fields = ('coach', 'session')

@admin.register(Payslip)
class PayslipAdmin(admin.ModelAdmin):
    list_display = ('__str__', 'coach', 'month', 'year', 'total_amount', 'generated_at')
    list_filter = ('year', 'month', 'coach')
    search_fields = ('coach__name', 'year')
    readonly_fields = ('coach', 'month', 'year', 'total_amount', 'generated_at', 'generated_by', 'file')
    
    # --- ADD THE NEW ACTION ---
    actions = ['send_payslips_to_coaches']

    @admin.action(description="Email selected payslips to coaches")
    def send_payslips_to_coaches(self, request, queryset):
        sent_count = 0
        skipped_count = 0
        error_count = 0

        for payslip in queryset:
            if not payslip.file:
                self.message_user(request, f"Skipped: Payslip for {payslip.coach} has no file.", messages.WARNING)
                skipped_count += 1
                continue
                
            if not payslip.coach.user or not payslip.coach.user.email:
                self.message_user(request, f"Skipped: Coach {payslip.coach.name} has no user or no email address.", messages.WARNING)
                skipped_count += 1
                continue
            
            try:
                if send_payslip_email(payslip):
                    sent_count += 1
                else:
                    error_count += 1
                    self.message_user(request, f"Error sending payslip to {payslip.coach.user.email}. See console log.", messages.ERROR)
            except Exception as e:
                error_count += 1
                self.message_user(request, f"Critical error sending payslip to {payslip.coach.user.email}: {e}", messages.ERROR)

        summary = f"Process complete. Sent: {sent_count}, Skipped: {skipped_count}, Errors: {error_count}."
        self.message_user(request, summary, messages.INFO)
    # --- END OF NEW ACTION ---

    def has_add_permission(self, request):
        return False # Payslips should be generated by actions, not added manually