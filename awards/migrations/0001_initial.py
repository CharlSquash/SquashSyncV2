# Generated by Django 5.2 on 2025-10-27 06:46

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('players', '0005_alter_schoolgroup_options'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PrizeCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Prize Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('year', models.PositiveIntegerField(default=2025)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('VOTING', 'Voting Open'), ('DECIDED', 'Winner Decided'), ('ARCHIVED', 'Archived')], db_index=True, default='PENDING', max_length=10)),
                ('voting_opens', models.DateTimeField(blank=True, help_text='Optional: When voting becomes available.', null=True)),
                ('voting_closes', models.DateTimeField(blank=True, help_text='Optional: When voting ends.', null=True)),
                ('min_grade', models.PositiveIntegerField(blank=True, choices=[(0, 'Grade R'), (1, 'Grade 1'), (2, 'Grade 2'), (3, 'Grade 3'), (4, 'Grade 4'), (5, 'Grade 5'), (6, 'Grade 6'), (7, 'Grade 7'), (8, 'Grade 8'), (9, 'Grade 9'), (10, 'Grade 10'), (11, 'Grade 11'), (12, 'Grade 12 (Matric)'), (99, 'Other / Not Applicable')], help_text='Minimum grade (inclusive) to be eligible.', null=True)),
                ('max_grade', models.PositiveIntegerField(blank=True, choices=[(0, 'Grade R'), (1, 'Grade 1'), (2, 'Grade 2'), (3, 'Grade 3'), (4, 'Grade 4'), (5, 'Grade 5'), (6, 'Grade 6'), (7, 'Grade 7'), (8, 'Grade 8'), (9, 'Grade 9'), (10, 'Grade 10'), (11, 'Grade 11'), (12, 'Grade 12 (Matric)'), (99, 'Other / Not Applicable')], help_text='Maximum grade (inclusive) to be eligible.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prizes', to='awards.prizecategory')),
            ],
            options={
                'ordering': ['-year', 'category__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PrizeWinner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField(editable=False)),
                ('final_score', models.PositiveIntegerField(blank=True, help_text='The vote score the player had when confirmed.', null=True)),
                ('award_date', models.DateField(default=django.utils.timezone.now)),
                ('awarded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='awarded_prizes', to=settings.AUTH_USER_MODEL)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='won_prizes', to='players.player')),
                ('prize', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='prize_winner_details', to='awards.prize')),
            ],
            options={
                'ordering': ['-year', 'prize__category__name', 'prize__name'],
                'unique_together': {('prize',)},
            },
        ),
        migrations.AddField(
            model_name='prize',
            name='winner',
            field=models.OneToOneField(blank=True, help_text='The confirmed winner for this prize.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='won_prize', to='awards.prizewinner'),
        ),
        migrations.AlterUniqueTogether(
            name='prize',
            unique_together={('name', 'year')},
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('voted_at', models.DateTimeField(auto_now=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prize_votes', to='players.player')),
                ('prize', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prize_votes', to='awards.prize')),
                ('voter', models.ForeignKey(limit_choices_to={'is_staff': True}, on_delete=django.db.models.deletion.CASCADE, related_name='cast_prize_votes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-voted_at'],
                'unique_together': {('prize', 'player', 'voter')},
            },
        ),
    ]
