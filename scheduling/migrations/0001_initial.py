# Generated by Django 5.2 on 2025-08-23 08:09

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('players', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DrillTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='A category or tag for a drill (e.g., Fitness, Forehand, Fun Games).', max_length=50, unique=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Venue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the venue (e.g., Midstream College Main Courts, Uitsig Court 1).', max_length=150, unique=True)),
                ('address', models.TextField(blank=True, help_text='Optional: Full address of the venue.', null=True)),
                ('notes', models.TextField(blank=True, help_text='Optional: Any notes about the venue (e.g., access instructions, number of courts).', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this venue currently in use?')),
            ],
            options={
                'verbose_name': 'Venue',
                'verbose_name_plural': 'Venues',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Drill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
                ('description', models.TextField(blank=True)),
                ('duration_minutes_default', models.PositiveIntegerField(default=10, help_text='Default duration in minutes for this drill.', validators=[django.core.validators.MinValueValidator(1)])),
                ('ideal_num_players', models.IntegerField(blank=True, choices=[(1, '1 Player'), (2, '2 Players'), (3, '3 Players'), (4, '4+ Players')], help_text='Ideal number of players for this drill.', null=True)),
                ('suitable_for_any', models.BooleanField(default=False, help_text='Check if this drill works well regardless of specific group skill level or size (within reason).')),
                ('youtube_link', models.URLField(blank=True, help_text='Optional: A link to a YouTube video demonstrating the drill.', max_length=1024, null=True, verbose_name='YouTube Link')),
                ('tags', models.ManyToManyField(blank=True, related_name='drills', to='scheduling.drilltag')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the event.', max_length=200)),
                ('event_type', models.CharField(choices=[('SOCIAL', 'Social Event'), ('TOURNMT', 'Tournament Support'), ('SCHOOL', 'School Function'), ('CEREMONY', 'Capping/Awards Ceremony'), ('MEETING', 'Coach/Staff Meeting'), ('WORKSHOP', 'Workshop/Training'), ('OTHER', 'Other Event')], default='OTHER', max_length=10)),
                ('event_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('description', models.TextField(blank=True, null=True)),
                ('attending_coaches', models.ManyToManyField(blank=True, related_name='attended_events', to='accounts.coach')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['-event_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ScheduledClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('default_duration_minutes', models.PositiveIntegerField(default=60, validators=[django.core.validators.MinValueValidator(1)])),
                ('is_active', models.BooleanField(default=True, help_text='If unchecked, new sessions will not be generated from this rule.')),
                ('notes_for_rule', models.TextField(blank=True, help_text='Internal notes about this recurring schedule rule.', null=True)),
                ('default_coaches', models.ManyToManyField(blank=True, related_name='default_scheduled_classes', to='accounts.coach')),
                ('school_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_classes', to='players.schoolgroup')),
                ('default_venue', models.ForeignKey(blank=True, help_text='Default venue for this recurring class.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduling.venue')),
            ],
            options={
                'verbose_name': 'Scheduled Class Rule',
                'verbose_name_plural': 'Scheduled Class Rules',
                'ordering': ['school_group__name', 'day_of_week', 'start_time'],
                'unique_together': {('school_group', 'day_of_week', 'start_time')},
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_date', models.DateField(default=django.utils.timezone.now)),
                ('session_start_time', models.TimeField(default=django.utils.timezone.now)),
                ('planned_duration_minutes', models.PositiveIntegerField(default=60, validators=[django.core.validators.MinValueValidator(1)])),
                ('is_cancelled', models.BooleanField(default=False, help_text='Mark as true if the session has been cancelled.')),
                ('notes', models.TextField(blank=True, help_text='Optional objectives or notes for the session.')),
                ('plan', models.JSONField(blank=True, help_text='Stores the detailed lesson plan including timeline, groups, and activities.', null=True)),
                ('start_time', models.DateTimeField(blank=True, help_text='The actual start time when a coach begins the session.', null=True)),
                ('end_time', models.DateTimeField(blank=True, help_text='The actual end time when a session is finished.', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('active', 'Active'), ('finished', 'Finished')], default='pending', max_length=10)),
                ('attendees', models.ManyToManyField(blank=True, related_name='attended_sessions', to='players.player')),
                ('coaches_attending', models.ManyToManyField(blank=True, related_name='coached_sessions', to='accounts.coach')),
                ('generated_from_rule', models.ForeignKey(blank=True, help_text='Link to the recurring schedule rule, if this session was auto-generated.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_sessions', to='scheduling.scheduledclass')),
                ('school_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sessions', to='players.schoolgroup')),
                ('venue', models.ForeignKey(blank=True, help_text='Venue where the session takes place.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='scheduling.venue')),
            ],
            options={
                'ordering': ['-session_date', '-session_start_time'],
            },
        ),
        migrations.CreateModel(
            name='CoachAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('AVAILABLE', 'Available'), ('UNAVAILABLE', 'Unavailable'), ('EMERGENCY', 'Emergency Only')], default='PENDING', help_text="Coach's availability status for this session.", max_length=12)),
                ('notes', models.TextField(blank=True, help_text='Optional notes (e.g., reason for unavailability).')),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('last_action', models.CharField(blank=True, choices=[('CONFIRM', 'Confirmed'), ('DECLINE', 'Declined')], help_text='The last explicit action taken by the coach.', max_length=10, null=True)),
                ('status_updated_at', models.DateTimeField(blank=True, help_text='Timestamp of when the status was explicitly confirmed or declined.', null=True)),
                ('coach', models.ForeignKey(limit_choices_to={'is_staff': True}, on_delete=django.db.models.deletion.CASCADE, related_name='session_availabilities', to=settings.AUTH_USER_MODEL)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='coach_availabilities', to='scheduling.session')),
            ],
            options={
                'verbose_name': 'Coach Availability',
                'verbose_name_plural': 'Coach Availabilities',
                'ordering': ['session__session_date', 'session__session_start_time', 'coach__username'],
                'unique_together': {('coach', 'session')},
            },
        ),
        migrations.CreateModel(
            name='AttendanceTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_response', models.CharField(choices=[('PENDING', 'Pending'), ('ATTENDING', 'Attending'), ('NOT_ATTENDING', 'Not Attending')], default='PENDING', max_length=20, verbose_name="Parent's Response")),
                ('attended', models.CharField(choices=[('UNSET', 'Unset'), ('YES', 'Yes'), ('NO', 'No')], default='UNSET', max_length=10, verbose_name='Coach-Marked Attendance')),
                ('recorded_at', models.DateTimeField(auto_now=True, help_text='Timestamp of the last update.')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='players.player')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_attendances', to='scheduling.session')),
            ],
            options={
                'verbose_name': 'Player Attendance Tracking',
                'unique_together': {('session', 'player')},
            },
        ),
    ]
